frameworkVersion: '=1.6.1'

plugins:
  - environment-variables
  - serverless-webpack
  - content-handling

service: yith

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: ${env:YITH_REGION}
  environment:
    admins: ${env:YITH_ADMINS}
    registry: ${env:YITH_REGISTRY}
    githubUrl: ${env:YITH_GITHUB_URL}
    githubClientId:  ${env:YITH_GITHUB_CLIENT_ID}
    githubSecret:  ${env:YITH_GITHUB_SECRET}
    bucket: ${env:YITH_BUCKET}-${opt:stage}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "apigateway:POST"
      Resource:
        - "arn:aws:s3:::${self:provider.environment.bucket}*"
        - "arn:aws:apigateway:*"

functions:
  authorizerGithub:
    handler: authorizerGithub.default

  put:
    handler: put.default
    events:
      - http:
          path: 'registry/{name}'
          method: put
          authorizer: authorizerGithub
  get:
    handler: get.default
    events:
      - http:
          path: 'registry/{name}'
          method: get
          authorizer: authorizerGithub

  distTagsGet:
    handler: distTagsGet.default
    events:
      - http:
          path: 'registry/-/package/{name}/dist-tags'
          method: get
          authorizer: authorizerGithub
  distTagsPut:
    handler: distTagsPut.default
    events:
      - http:
          path: 'registry/-/package/{name}/dist-tags/{tag}'
          method: put
          authorizer: authorizerGithub
  distTagsDelete:
    handler: distTagsDelete.default
    events:
      - http:
          path: 'registry/-/package/{name}/dist-tags/{tag}'
          method: delete
          authorizer: authorizerGithub

  userPut:
    handler: userPut.default
    events:
      - http:
          path: 'registry/-/user/{id}'
          method: put

  tarGet:
    handler: tarGet.default
    events:
      - http:
          integration: lambda
          authorizer: authorizerGithub
          path: 'registry/{name}/-/{tar}'
          method: get
          contentHandling: CONVERT_TO_BINARY
          request:
            template:
              application/json: >
                {
                  "name": "$input.params('name')",
                  "tar": "$input.params('tar')"
                }

resources:
  Resources:
    PackageStorage:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:provider.environment.bucket}

custom:
  webpackIncludeModules: true
